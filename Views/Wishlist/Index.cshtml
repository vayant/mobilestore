@model IEnumerable<mobilestore.Models.WishlistClass>

@{
    ViewData["Title"] = "Избранное";
}

<style>
    .btn-icon {
        width: 36px;
        height: 36px;
        padding: 0;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: 2px solid #e9ecef;
        background-color: white;
        transition: all 0.2s;
    }

    .btn-icon:hover {
        background-color: #f8f9fa;
        transform: translateY(-2px);
        border-color: #dee2e6;
    }

    .btn-icon:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    .btn-icon i {
        font-size: 1.1rem;
        color: #6c757d;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        line-height: 1;
    }

    .btn-icon[data-wishlist-button] i {
        color: #dc3545;
    }

    .btn-icon[data-wishlist-button]:hover {
        background-color: #fef2f2;
        border-color: #dc3545;
    }

    .btn-icon[data-cart-button] i {
        color: #0d6efd;
        margin: 0;
    }

    .btn-icon[data-cart-button]:hover {
        background-color: #e9ecef;
        transform: translateY(-2px);
    }

    .btn-icon[data-cart-button]:focus {
        outline: none !important;
        box-shadow: none !important;
    }

    .btn-icon[onclick*="addToCart"] i {
        color: #0d6efd;
    }

    .btn-icon[onclick*="addToCart"]:hover {
        background-color: #f0f7ff;
        border-color: #0d6efd;
    }

    .product-card {
        border: none;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15) !important;
    }
</style>

<div class="container">
    <h2 class="mb-4">Список избранного</h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            Ваш список избранного пуст, пора это исправить!
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var item in Model)
            {
                <div class="col">
                    <div class="card product-card shadow-sm h-100">
                        <div class="product-image-container">
                            @if (!string.IsNullOrEmpty(item.Product.ImageUrl))
                            {
                                <img src="@item.Product.ImageUrl" class="product-image" alt="@item.Product.Name">
                            }
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.Product.Name</h5>
                            <p class="card-text flex-grow-1">@item.Product.Description</p>
                            <div class="mt-auto">
                                <p class="product-price mb-3">@item.Product.Price.ToString("C")</p>
                                <div class="d-flex gap-2">
                                    <button class="btn btn-icon" onclick="addToCart(@item.ProductId)"
                                            data-cart-button
                                            data-product-id="@item.ProductId">
                                        <i class="bi bi-cart"></i>
                                    </button>
                                    <button class="btn btn-icon" onclick="removeFromWishlist(@item.ProductId)"
                                            data-wishlist-button
                                            data-product-id="@item.ProductId">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Scripts {
    <script>
        function removeFromWishlist(productId) {
            Swal.fire({
                title: 'Удаление товара',
                text: 'Вы действительно хотите удалить этот товар из списка избранного?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Да',
                cancelButtonText: 'Отменить',
                confirmButtonColor: '#00b300',
                cancelButtonColor: '#d33'
            }).then((result) => {
                if (result.isConfirmed) {
                    const button = document.querySelector(`[data-product-id="${productId}"]`);
                    const icon = button.querySelector('i');

                    fetch('/Wishlist/RemoveFromWishlist', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(productId)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            toastr.success('Товар успешно удален из списка избранного');
                            const productCard = button.closest('.col');
                            productCard.remove();
                            
                            if (document.querySelectorAll('.col').length === 0) {
                                location.reload(); 
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        toastr.error('Произошла ошибка при удалении товара');
                    });
                }
            });
        }
    </script>
} 