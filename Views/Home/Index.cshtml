@model IEnumerable<ProductClass>

@{
    ViewData["Title"] = "Главная";
}

<div class="container">
    <div class="hero-section mb-5">
        <div class="hero-content">
            <h1 class="hero-title">Добро пожаловать в интернет-магазин "Звонилка"!</h1>
            <h1 class="hero-title">Рады Вас видеть!</h1>
            <p class="hero-subtitle">Войдите в мир крайне выдающихся технологий нашего времени</p>
            <div class="hero-buttons">
                <a href="/Category" class="btn btn-primary btn-lg">Откройте наш каталог - портал в новый мир</a>
            </div>
        </div>
        <div class="hero-overlay"></div>
    </div>


    <!-- Каталог товаров -->
    <div class="products-section mt-5">
        <h2 class="text-center mb-4">Каталог товаров</h2>
        <hr class="mb-4">
        @if (ViewBag.SearchTerm != null)
        {
            <div class="row mb-4">
                <div class="col">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h2 class="mb-2">Результаты поиска: "@ViewBag.SearchTerm"</h2>
                            <p class="text-muted mb-0">Найдено товаров: @Model.Count()</p>
                        </div>
                        <a href="/" class="btn btn-outline-primary">
                            <i class="bi bi-grid"></i> Каталог товаров
                        </a>
                    </div>
                </div>
            </div>
        }

        @if (!Model.Any())
        {
            <div class="alert alert-info mt-4">
                @(ViewBag.SearchTerm != null ? "По вашему запросу ничего не найдено" : "В каталоге пока нет такого товара")
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4">
                @foreach (var product in Model)
                {
                    <div class="col">
                        <div class="card h-100 product-card shadow-sm">
                            <div class="product-image-container">
                                <img src="@product.ImageUrl" class="product-image" alt="@product.Name">
                            </div>
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@product.Name</h5>
                                <p class="card-text flex-grow-1">@product.Description</p>
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div class="price-block">
                                        <div class="main-price">@product.Price.ToString("N0") ₽</div>
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-icon" 
                                                onclick="addToWishlist(@product.Id)"
                                                data-wishlist-button
                                                data-product-id="@product.Id">
                                            <i class="bi bi-heart"></i>
                                        </button>
                                        <button class="btn btn-icon" onclick="addToCart(@product.Id)">
                                            <i class="bi bi-cart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
.hero-section {
    position: relative;
    background-image: url('/images/hero-bg.jpg');
    background-size: cover;
    background-position: center;
    height: 500px;
    border-radius: 20px;
    margin-top: 2rem;
    overflow: hidden;
    display: flex;
    align-items: center;
    padding: 4rem;
}

.hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(13, 110, 253, 0.9) 0%, rgba(13, 202, 240, 0.8) 100%);
    z-index: 1;
}

.hero-content {
    position: relative;
    z-index: 2;
    color: white;
    max-width: 600px;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.2;
}

.hero-subtitle {
    font-size: 1.5rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.hero-buttons .btn {
    padding: 0.8rem 2rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 1px;
    transition: all 0.3s ease;
}

.hero-buttons .btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.2);
}
.category-card {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 2rem;
    border-radius: 15px;
    background: white;
    text-decoration: none;
    color: #333;
    transition: all 0.3s ease;
    border: 1px solid #e9ecef;
}

.category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.category-icon {
    width: 64px;
    height: 64px;
    margin-bottom: 1rem;
    object-fit: contain;
}

.category-card span {
    font-size: 1.1rem;
    font-weight: 500;
}

.product-card {
    transition: transform 0.3s ease;
}

.product-card:hover {
    transform: translateY(-5px);
}

.product-image-container {
    height: 200px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
}

.product-image {
    max-height: 100%;
    width: auto;
    object-fit: contain;
}
</style>

<script>
function addToWishlist(productId) {
    const button = document.querySelector(`[data-product-id="${productId}"]`);
    const icon = button.querySelector('[data-wishlist-icon]');
    if (button.classList.contains('in-wishlist')) {
        fetch('/Wishlist/RemoveFromWishlist', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(productId)
        })
        .then(response => {
            if (response.status === 401) {
                toastr.error('Необходима авторизация');
                window.location.href = '/Home/Login';
                return;
            }
            return response.json();
        })
        .then(data => {
            if (!data) return;
            if (data.success) {
                button.classList.remove('in-wishlist');
                icon.classList.remove('bi-heart-fill');
                icon.classList.add('bi-heart');
                toastr.success('Товар удален из списка избранного');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            toastr.error('Произошла ошибка при удалении товара');
        });
        return;
    }

    fetch('/Wishlist/AddToWishlist', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        body: JSON.stringify(productId)
    })
    .then(response => {
        if (response.status === 401) {
            toastr.error('Необходима авторизация');
            window.location.href = '/Home/Login';
            return;
        }
        return response.json();
    })
    .then(data => {
        if (!data) return;
        if (data.success) {
            button.classList.add('in-wishlist');
            icon.classList.remove('bi-heart');
            icon.classList.add('bi-heart-fill');
            toastr.success('Товар добавлен в список избранного');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        toastr.error('Произошла ошибка при добавлении товара');
    });
}

function checkWishlistItems() {
    document.querySelectorAll('[data-wishlist-button]').forEach(button => {
        const productId = button.getAttribute('data-product-id');
        const icon = button.querySelector('[data-wishlist-icon]');
        
        fetch(`/Wishlist/IsInWishlist?productId=${productId}`)
            .then(response => response.json())
            .then(data => {
                if (data.isInWishlist) {
                    button.classList.add('in-wishlist');
                    icon.classList.remove('bi-heart');
                    icon.classList.add('bi-heart-fill');
                }
            });
    });
}

document.addEventListener('DOMContentLoaded', checkWishlistItems);
</script>
